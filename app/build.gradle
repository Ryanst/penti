apply plugin: 'com.android.application'
apply plugin: 'android-apt'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        applicationId "com.ryanst.penti"
        minSdkVersion 17
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }

    signingConfigs {
        ryanstConfig {
            storeFile file(RELEASE_STOREFILE)
            storePassword RELEASE_STORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
        }
    }

    buildTypes {

        release {
            signingConfig signingConfigs.ryanstConfig
            minifyEnabled false
            zipAlignEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    if (output.outputFile != null && output.outputFile.name.endsWith('.apk')
                            && 'release'.equals(variant.buildType.name)) {
                        def apkFile = new File(
                                output.outputFile.getParent(),
                                "penti${variant.flavorName}_v${variant.versionName}_${buildTime()}.apk")
                        output.outputFile = apkFile
                    }
                }
            }
        }

        debug {
            zipAlignEnabled false
            shrinkResources false
            minifyEnabled false
//            testCoverageEnabled = true
            debuggable true
            signingConfig signingConfigs.ryanstConfig
        }
    }

    //输入参数中包含 -Pmc 时才进行多渠道构建
    if (project.hasProperty('mc')) {
        def path = "./build-types/type.txt"
        //多渠道构建
        println "multi channel"
        file(path).eachLine { line ->
            println "channel name : " + line
            android.productFlavors.create(line, {
                manifestPlaceholders = [CHANNEL_VALUE: "" + line]
            })
        }
    } else {
        buildTypes.release.manifestPlaceholders = [CHANNEL_VALUE: "999"]
        buildTypes.debug.manifestPlaceholders = [CHANNEL_VALUE: "999"]
    }

    dependencies {
        compile fileTree(dir: 'libs', include: ['*.jar'])
        testCompile 'junit:junit:4.12'
        compile 'com.android.support:appcompat-v7:23.3.0'
        compile 'com.android.support:design:23.3.0'
        compile 'com.android.support:recyclerview-v7:23.3.0'
        compile 'com.android.support:cardview-v7:23.3.0'

        //butterknife
        compile 'com.jakewharton:butterknife:8.0.1'
        apt 'com.jakewharton:butterknife-compiler:8.0.1'

        //use for net
        compile 'com.squareup.retrofit2:retrofit:2.0.0-beta4'
        compile 'com.squareup.okhttp3:okhttp:3.2.0'
        compile 'com.squareup.okhttp3:logging-interceptor:3.0.1'
        compile 'com.squareup.retrofit2:converter-gson:2.0.0-beta4'
        compile 'com.squareup.retrofit:adapter-rxjava:2.0.0-beta1'

        //友盟统计
        compile 'com.umeng.analytics:analytics:latest.integration'

        //glide
        compile 'com.github.bumptech.glide:glide:3.7.0'
        androidTestCompile 'com.jayway.android.robotium:robotium-solo:5.1'

        //eventbus
        compile 'org.greenrobot:eventbus:3.0.0'

        //glide
        compile 'com.github.bumptech.glide:glide:3.7.0'

        //logger
        compile 'com.orhanobut:logger:1.15'

        //supertoast
        compile 'com.github.johnpersano:supertoasts:1.3.4@aar'

        //blockcanary
        debugCompile 'com.github.moduth:blockcanary-android:1.2.1'
        releaseCompile 'com.github.moduth:blockcanary-no-op:1.2.1'
    }
}


def buildTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}